import sys

class Graph():
    def __init__(self, vertices):  # Fixed constructor
        self.V = vertices
        self.graph = [[0 for _ in range(vertices)] for _ in range(vertices)]
    
    def printMST(self, parent, heuristics, total_cost):
        print("\nEdge \tWeight \tHeuristic Value")
        for i in range(1, self.V):
            print(f"{parent[i]} - {i} \t {self.graph[i][parent[i]]} \t {heuristics[i]}")
        print(f"\nTotal MST Cost: {total_cost}")
    
    def minKey(self, key, mstSet):
        min_val = sys.maxsize
        min_index = -1
        for v in range(self.V):
            if key[v] < min_val and not mstSet[v]:
                min_val = key[v]
                min_index = v
        return min_index
    
    def primMST(self, heuristics, source=0):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V
        key[source] = 0
        mstSet = [False] * self.V
        parent[source] = -1
        
        for _ in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True
            for v in range(self.V):
                if self.graph[u][v] > 0 and not mstSet[v] and self.graph[u][v] < key[v]:
                    key[v] = self.graph[u][v]
                    parent[v] = u
        total_cost = sum(self.graph[i][parent[i]] for i in range(1, self.V))
        self.printMST(parent, heuristics, total_cost)

if __name__ == '__main__':
    
    vertices = int(input("\nEnter the number of vertices: "))
    g = Graph(vertices)

    print("\nEnter the graph as an adjacency matrix (use 0 for no edge):")
    for i in range(vertices):
        row = list(map(int, input(f"Row {i}: ").split()))
        for j in range(vertices):
            g.graph[i][j] = row[j]
    
    heuristics = []
    print("\nEnter heuristic values for each vertex:")
    for i in range(vertices):
        h_value = int(input(f"Heuristic value for vertex {i}: "))
        heuristics.append(h_value)
    
    source_vertex = int(input("\nEnter the source vertex (0 to V-1): "))
    g.primMST(heuristics, source=source_vertex)
