import sys

# ---------- Kruskal's Algorithm ---------
class KruskalGraph:
    def __init__(self, vertices):
        self.V = vertices
        self.edges = []
        self.heuristics = {}

    def add_edge(self, u, v, w, h):
        self.edges.append((u, v, w))
        self.heuristics[(u, v)] = h
        self.heuristics[(v, u)] = h

    def find(self, parent, i):
        if parent[i] != i:
            parent[i] = self.find(parent, parent[i])
        return parent[i]

    def union(self, parent, rank, x, y):
        if rank[x] < rank[y]:
            parent[x] = y
        elif rank[x] > rank[y]:
            parent[y] = x
        else:
            parent[y] = x
            rank[x] += 1

    def run_kruskal(self):
        # Sorting edges based on weight + heuristic value
        self.edges.sort(key=lambda x: x[2] + self.heuristics.get((x[0], x[1]), 0))
        
        parent = list(range(self.V))
        rank = [0] * self.V
        result = []
        cost = 0

        for u, v, w in self.edges:
            x = self.find(parent, u)
            y = self.find(parent, v)
            if x != y:
                self.union(parent, rank, x, y)
                result.append((u, v, w))
                cost += w
            if len(result) == self.V - 1:
                break

        print("\nKruskal's MST:")
        for u, v, w in result:
            print(f"{u} - {v} : {w}")
        print("Total Cost:", cost)


# ---------- Prim's Algorithm ---------
class PrimGraph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0] * vertices for _ in range(vertices)]

    def set_edge(self, i, row):
        self.graph[i] = row

    def run_prim(self, heuristics, start=0):
        key = [sys.maxsize] * self.V
        parent = [-1] * self.V
        mst_set = [False] * self.V
        key[start] = 0

        for _ in range(self.V):
            min_key = sys.maxsize
            u = -1
            for v in range(self.V):
                if not mst_set[v] and key[v] < min_key:
                    min_key = key[v]
                    u = v
            mst_set[u] = True

            for v in range(self.V):
                if self.graph[u][v] > 0 and not mst_set[v] and self.graph[u][v] + heuristics[v] < key[v]:
                    key[v] = self.graph[u][v] + heuristics[v]
                    parent[v] = u

        total_cost = 0
        print("\nPrim's MST:")
        for i in range(1, self.V):
            print(f"{parent[i]} - {i} : {self.graph[i][parent[i]]}")
            total_cost += self.graph[i][parent[i]]
        print("Total Cost:", total_cost)


# ---------- Main Program ---------
print("Name: Sakshi Malusare")
print("Roll No: TACO22150")
print("Heuristic is used to prioritize edges. Lower heuristic = better edge.\n")

V = int(input("Enter number of vertices: "))
E = int(input("Enter number of edges: "))

# Initialize graphs
k_graph = KruskalGraph(V)
p_graph = PrimGraph(V)

print("\nEnter edges (u v weight heuristic):")
for _ in range(E):
    u, v, w, h = map(int, input().split())
    k_graph.add_edge(u, v, w, h)
    p_graph.graph[u][v] = w
    p_graph.graph[v][u] = w  # undirected

heuristics = []
print("\nEnter heuristic values for each vertex:")
for i in range(V):
    heuristics.append(int(input(f"Heuristic for vertex {i}: ")))

# Run both algorithms
k_graph.run_kruskal()
p_graph.run_prim(heuristics, start=0)
